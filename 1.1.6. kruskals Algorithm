#include <stdio.h>
		parent[root_j] = root_i;
	else {
		parent[root_j] = root_i;
		rank[root_i]++;
	}
	// Write your code here...
}


void kruskalMST(int **cost, int V) {

	// Write your code here...
 int parent[V], rank[V];
	for (int i = 0; i < V; i++) {
		parent[i] = i;
		rank[i] = 0;
	}

	int edgeCount = 0;
	int minCost = 0;

		while (edgeCount < V - 1) {
		int min = 9999, a = -1, b = -1;

		for (int i = 0; i < V; i++) {
			for (int j = 0; j < V; j++) {
				if (find(parent, i) != find(parent, j) && cost[i][j] < min) {
					min = cost[i][j];
					a = i;
					b = j;
				}
			}
		}

		if (a != -1 && b != -1) {
			union1(parent, rank, a, b);
			printf("Edge %d:(%d, %d) cost:%d\n", edgeCount, a, b, min);
			minCost += min;
			edgeCount++;
		}
	}

	printf("Minimum cost= %d\n",minCost);
}


int main() {
    int V;
    printf("No of vertices: ");
    scanf("%d", &V);

    int **cost = (int **)malloc(V * sizeof(int *));
    for (int i = 0; i < V; i++)
        cost[i] = (int *)malloc(V * sizeof(int));

    printf("Adjacency matrix:\n");
    for (int i = 0; i < V; i++)
        for (int j = 0; j < V; j++)
            scanf("%d", &cost[i][j]);

    kruskalMST(cost, V);

    for (int i = 0; i < V; i++)
        free(cost[i]);
    free(cost);

    return 0;
}
